// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TitreEnum {
  M
  Mme
  Mlle
}

model User {
  id            String    @id @default(uuid())
  titre         TitreEnum
  cin           String    @unique
  prenom        String
  nom           String
  email         String    @unique
  password      String
  adresse       String?
  dateNaissance DateTime
  villeId       String?
  ville         Ville?    @relation(fields: [villeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  codePostal    Int?
  telephone     String
  candidat      Candidat?
  admin         Admin?
}

model Candidat {
  id             String       @id @default(uuid())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Attachments    Attachment[]
  concoursActifs Concours[]
  diplomes       Diplome[]
}

model Admin {
  id           String  @id @default(uuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isSuperAdmin Boolean @default(false)
}

model Diplome {
  id             String             @id @default(uuid())
  label          String
  typeId         String?
  type           DiplomeType?       @relation(fields: [typeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  affiliationId  String?
  affiliation    Affiliation?       @relation(fields: [affiliationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  specialityId   String?
  speciality     DiplomeSpecialite? @relation(fields: [specialityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  anneeObtention String
  paysId         String?
  paysObtention  Pays?              @relation(fields: [paysId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ecoleId        String?
  ecole          Ecole?             @relation(fields: [ecoleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  attachments    Attachment[]
  candidatId     String?
  candidat       Candidat?          @relation(fields: [candidatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model DiplomeType {
  id       String    @id @default(uuid())
  nom      String // master, doctorat, Brevet, ingénieur etc ...
  diplomes Diplome[]
}

model Affiliation {
  id          String              @id @default(uuid())
  Filiere     String //.e.g génieCivil, developpement informatique, réseau, management .... 
  specialites DiplomeSpecialite[] //e.g web, mobile, AI, BI ...
  diplomes    Diplome[]
}

model DiplomeSpecialite {
  id           String        @id @default(uuid())
  nom          String
  affiliations Affiliation[]
  diplomes     Diplome[]
}

model Pays {
  id      String    @id @default(uuid())
  code    String    @unique
  nom     String    @unique
  diplome Diplome[]
}

model Ecole {
  id       String    @id @default(uuid())
  nom      String
  adresse  String?
  villeId  String?
  ville    Ville?    @relation(fields: [villeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  diplomes Diplome[]
}

model Ville {
  id         String     @id @default(uuid())
  nom        String
  concours   Concours[]
  users      User[]
  ecoles     Ecole[]
  regionId   Int?
  region     Region?    @relation(fields: [regionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  chefRegion Boolean    @default(false)
  status     Boolean    @default(true)
}

model Region {
  id     Int     @id
  nom    String
  villes Ville[]
}

enum concoursStatus {
  Disabled
  enabled
  ended
}

model Concours {
  id                    String         @id @default(uuid())
  label                 String
  status                concoursStatus @default(enabled)
  directionId           String
  direction             direction      @relation(fields: [directionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  posteId               String
  poste                 poste          @relation(fields: [posteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gradeId               String
  grade                 Grade          @relation(fields: [gradeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specialiteId          String
  specialite            specialite     @relation(fields: [specialiteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brancheId             String
  branche               branche        @relation(fields: [brancheId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  limitePlaces          Int
  limiteAge             Int
  villes                Ville[]
  candidats             Candidat[]
  avis                  Attachment?
  datePublication       String?        
  dateLimiteInscription String?
  dateConcours          String?
  campagneId            String?
  campagne              Campagne?      @relation(fields: [campagneId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model direction {
  id       String     @id @default(uuid())
  label    String
  concours Concours[]
}

model poste {
  id       String     @id @default(uuid())
  label    String
  concours Concours[]
}

model Grade {
  id       String     @id @default(uuid())
  label    String
  concours Concours[]
}

model specialite {
  id       String     @id @default(uuid())
  label    String
  concours Concours[]
}

model branche {
  id       String     @id @default(uuid())
  label    String
  concours Concours[]
}

model Campagne {
  id                    String     @id @default(uuid())
  datePublication       String
  dateLimiteInscription String
  dateConcours          String
  status                String
  concours              Concours[]
}

enum AttachmentTypes {
  CIN
  CV
  DIPLOME
  AVIS
  AUTRE
}

model Attachment {
  id          String          @id @default(uuid())
  path        String
  type        AttachmentTypes
  data_base64 Bytes?
  candidatId  String?
  candidat    Candidat?       @relation(fields: [candidatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  concoursId  String?         @unique
  concours    Concours?       @relation(fields: [concoursId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  diplomeId   String?
  diplome     Diplome?        @relation(fields: [diplomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
